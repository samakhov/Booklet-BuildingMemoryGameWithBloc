
!! Adding Interaction

Now we will add interaction to the game. We want to flip the cards by clicking on them. 
Bloc supports such situations using two mechanisms: on one hand, event listeners handle events
and on the other hand, the communication between the model and view is managed via the registration to announcements
sent by the model.


!!! An event listener

[[[
BlElementEventListener subclass: #MgdCardEventListener
	instanceVariableNames: 'memoryGame'
	classVariableNames: ''
	package: 'Bloc-MemoryGame-Demo-Elements'
]]]

We add an instance variable ==memoryGame== holding a game model to the listener because 
we will need to access the model to react to events for example to update the game situation. 

[[[
MgdCardEventListener >> memoryGame: aGameModel
	memoryGame := aGameModel
]]]

Let us redefine the ==clickEvent:== method to raise a debugger. It will give us the occasion to introspect the system.

[[[
MgdCardEventListener >> clickEvent: anEvent
	self halt
]]]




!!! Adding event listeners

Now we should add the card event listener to each card because we want to know which card will be clicked and pass this 
information to the game model.


[[[
MgdGameElement >> newCardEventListener
	^ MgdCardEventListener new
]]]

For that we have to extend ==#memoryGame:== model setter in ==MgdGameElement== as follows by adding a card event listener to every card element using ==#addEventHandler:==: 

[[[
MgdGameElement >> memoryGame: aMgdGameModel
	| aCardEventListener |
	
	memoryGame := aMgdGameModel.
	aCardEventListener := self newCardEventListener memoryGame: aMgdGameModel.
	
	self layout columnCount: memoryGame gridSize.
	
	memoryGame availableCards
		do: [ :aCard | 
			| cardElement |
			cardElement := self newCardElement card: aCard.
			cardElement addEventHandler: aCardEventListener.
			self addChild: cardElement ]
]]]

Please note, that in our case we can reuse the same event handler for all card elements. It allows us to reduce overall memory consumption and improve game initialisation time.

+Debugging the clickEvent: anEvent method.>file://figures/ClickWithDebugger.png|width=100|label=figBoardFull+


Now the preview is not enough and we should create a window and embed the game element. 
Then when you click on an card you should get a debugger as shown in Figure *@figBoardFull*.
[[[
space := BlSpace new.
space extent: 420@420.  
game := MgdGameModel numbers.
grid := MgdGameElement new.
grid memoryGame: game. 
space root addChild: grid.
space show 
]]]


!!! Specialize clickEvent:
Now we can specialise the ==clickEvent:== method as follows: 
- We get the graphical element that receives the mouse click using the message ==currentTarget==. The message ==currentTarget== returns the element that receives an event.
- From this graphical card we access the card model and we pass this card model to the game model. 

[[[
MgdCardEventListener >> clickEvent: anEvent
	memoryGame chooseCard: anEvent currentTarget card
]]]

It means that the memory game model is changed but we do not see the visual effect of our actions. Indeed this is normal. We never made sure that visual elements are listening to model changes.  This is what we will do in the following chapter. 



!!! Connecting the model to the UI
Now we show how the domain communicates with the user interface: the domain emits notifications
using announcements but it does not refer to the UI elements. It is the visual elements that should register to the notifications and react accordingly.


Let us first define two simple methods in the class ==MgdRawCardElement== just producing a trace.
[[[
MgdRawCardElement >> onDisappear
	Transcript show: 'On disappear'; cr
]]]

[[[
MgdRawCardElement >> onFlipped
	Transcript show: 'On flipped'; cr
]]]

Now we can modify the setter so that when a card model is set to a card graphical element, we register to the notifications emitted by the model. 
In the following method, we make sure that on notifications we invoke the trace methods just defined. 

[[[
MgdRawCardElement >> card: aMgCard
	card := aMgCard.
	card announcer when: MgdCardFlippedAnnouncement send: #onFlipped to: self.
	card announcer when: MgdCardDisappearAnnouncement send: #onDisappear to: self
]]]

+Tracing registration to the domain notifications.>file://figures/EventTraced.png|width=100|label=figBoardEventTraced+

Now when you click on a card, you can see the trace in the Transcript but you do not see the changes. This is because we should notify 
the graphics engine that one element should be redrawn. 


[[[
MgdRawCardElement >> onFlipped
	Transcript show: 'On flipped'; cr.
	self invalidate
]]]

!!! Handling disappear

There are two ways to implement the disappearance of a card:
Either setting the opacity of the element to 0
(Note that the element is still present and receives events.),

[[[
MgdRawCardElement >> onDisappear
	Transcript show: 'On disappear'; cr.
	self opacity: 0
]]]

Or changing the visibility as follows:

[[[
MgdRawCardElement >> onDisappear
	Transcript show: 'On disappear'; cr.
	self visibility: BlVisibility hidden
]]]
	
Note that in the latter case the element no longer receives events.
It is used for layout. 

+Selecting two cards that are not in pair.>file://figures/BoardMissedPair.png|width=50|label=figBoardMissedPair+
!!! Refreshing on missed pair

When the player selects two cards that are not a pair, we present the two cards as shown in Figure *@figBoardMissedPair*.
Now the clicking on another card will flip back the previous cards. 

Remember, a card will raise a notification when flipped in either direction. 

[[[
MgdCardModel >> flip
	flipped := aBoolean.
	self notifyFlipped
]]]

In the method ==#resetStep== we see that all the previous cards are flipped (toggled).

[[[
MgdGameModel >> resetStep
	| lastCard |

	lastCard := self chosenCards  last.

	self chosenCards 
		allButLastDo: [ :aCard | aCard flip ];
		removeAll;
		add: lastCard
]]]
		

+Selecting two cards that are not a pair.>file://figures/BoardMissedPair.png|width=60|label=figBoardMissedPair+


!!! Conclusion

At this stage you are done for the simple interaction. Future versions of this document will explain how to add animations.


%!!! Main interaction done	
%At this stage you are done for the simple interaction. The following chapter will explain how we can add animation. 


%!! Adding animation
